#!/bin/bash
#
# Script Name: dns_notify
# Author: Samuel Tseng (Kerberos ID: amdhome)
# Synopsis: emails list of admins if any dns changes are made to specified addresses
# Created: January 14, 2020
# Usage: ./dns_notify {-h} [-v] [-e | -E overRideEmail] [-d IP_Address]
#
# Prerequisites:
#       - dig
#       - ssmtp (Setup with SMTP server)
#       - sendmail
#       - sed/awk/diff
#
# Other Notes: I used outlook SMTP servers with dcop email
# For more information read the help function
#


# globals
CURRENT_DIR="/root/dns_notify"
CheckList="${CURRENT_DIR}/CheckList"
DNS_SERVER="169.237.160.10"
SPECIFIEDDOMAIN=""
VERBOSE=0
NOEMAIL=0
NOTTL=0
UPDATE=0
OVERRIDEEMAIL=0
OEmailAddress=""
MESSAGECount=0


# Print Help Function
function pHelp {
    echo -e "Usage: ./dns_notify {-h} [-v] [-t] [-n [-u]| -e over_ride@email] [-d domain_name]\n"

    echo -e "Ex: ./dns_notify"
    echo -e "    ./dns_notify -v -n"
    echo -e "    ./dns_notify -v -n -u"
    echo -e "    ./dns_notify -e email@ucdavis.edu"
    echo -e "    ./dns_notify -d subdomain.ucdavis.edu\n\n"

    echo -e "About: ./dns_notify is a script that is meant to be run by a cron job with no"
    echo -e "       arguements to monitor the dns for important UC Davis domains. The first"
    echo -e "       time it runs on a specific domain, it will save a copy of the DNS records"
    echo -e "       as reported by dig. On consecutive runs it will run the current DNS"
    echo -e "       records against the one it has on file. If there are any differents in"
    echo -e "       the DNS records it will email the specified sysadmins.\n"
    echo -e "       All domains that will be checked along with their sysadmin's email will"
    echo -e "       be stored in the file CheckList\n\n"

    echo -e "Note: Unless -n is specified. The stored DNS entries will always update when run\n\n"

    echo -e "Options:"
    echo -e "\t-d: Specify domain: Only the specified domain will be checked. All other"
    echo -e "\t    entries in CheckList will be skipped. The domain entered must"
    echo -e "\t    already be in the CheckList file\n"
    echo -e "\t-e: Email Override. This flag will override all email preferences stored"
    echo -e "\t    In the checklist. All emails will be sent to the specified address."
    echo -e "\t    The sysadmin specified in CheckList will not recieve an email. This"
    echo -e "\t    flag will have no effect if the No Email flag (-n) is specified\n"
    echo -e "\t-h: Help: Prints out this help screen\n"
    echo -e "\t-n: No Email: Will not send any emails out. It will just print the email"
    echo -e "\t    that would've been sent onto the screen. No DNS checks will be"
    echo -e "\t    updated. If you wish to update the DNS checks use the -u flag\n"
    echo -e "\t-t: No TTL: Enabling this flag will omit the TTL from any DNS checks. Use"
    echo -e "\t    this if checking DNSs that arent on the specified DNS server.\n"
    echo -e "\t-u: Update DNS entries: Enabling this flag will update the cached DNS"
    echo -e "\t    entries stored in the checks. This flag will only have an effect"
    echo -e "\t    when the -n flag is used. Under normal circumstances, the cached DNS"
    echo -e "\t    entries already update automatically.\n"
    echo -e "\t-v: Verbose mode: Prints out all command outputs\n"
    exit 1
}


# Email Send Function
# $1: Email addresses to send to
# $2: Domain name
# $3: Diff of DNS entries


function send {

MESSAGE=`(
echo "From: dcop-bot@ucdavis.edu";
echo "To:$1";
echo "Subject: DNS Entries Changed for $2";

echo "
Hello Admin's,

The following change(s) have been detected for the domain $2.

$3

If these changes were intentional then no action is necessary. The checks have already updated with these new DNS entries.
If these changes were not intentional please contact the the relevent sysadmins and/or operations to revert the changes.

Please do not reply or send emails back to this email address. This inbox is not monitored.

Thanks,
Operations Team
Hotline: (530) 752-1566
";
)`
    
    if [ $VERBOSE -eq 1 ] || [ $NOEMAIL -eq 1 ]
    then 
        echo -e "This will be the email sent:\n"
        echo "$MESSAGE"
        let "MESSAGECount+=1" 
    fi

    if [ $VERBOSE -eq 1 ] && [ $NOEMAIL -ne 1 ]; then echo -e "\nSending Email...\n"; fi
    
    if [ $NOEMAIL -ne 1 ]; then echo "$MESSAGE" | sendmail -t; fi
    
    if [ $VERBOSE -eq 1 ] && [ $NOEMAIL -ne 1 ]; then echo -e "Email Sent.\n"; fi

    if [ $NOEMAIL -eq 1 ]; then echo -e "\n-n flag enabled. Email not sent.\n"; fi

    if [ $NOEMAIL -eq 1 ]
    then
        if [ $UPDATE -eq 1 ]
        then
            echo -e "-u flag enabled. Entries will be updated\n"
         else
            echo -e "Entries will not be updated\n"
        fi
    fi
}

# Checks to see if an IP is a valid IP
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}


# Function to perform the checks
# $1: Domain being checked
# $2: List of admins
#
# The command run is
# dig "@${DNS_SERVER}" "$domain" any | sed -n '/^;; ANSWER SECTION:$/,/^;; Query time:/p' | sed '/RRSIG/d' | sed '/SOA/d' | head -n -2 | sort
#
# Breakdown:
# dig "@${DNS_SERVER}" "$domain" any:        Ask the primary UC Davis DNS server for DNS information on the domains in the CheckList
# sed -n '/^;; ANSWER SECTION:$/,/^;; Query time:/p':       Only display lines from ";; ANSWER SECTION:" to ";; Query time:"
# sed -e '/RRSIG/d' -e '/SOA/d' -e '/^;;/d' -e '/^$/d':     Remove all RRSIG and SOA entries (entries managed by infoblox). Also remove lines starting with ;; and blank lines
# sort:                 Sort lines so they are in alphabetical order

function check {

    # Check for special arguements
    sARG=0
    oARG=0
    if [ "$3" == "T" ]
    then
        sARG=1
        oARG="$NOTTL"
        NOTTL=1
        if [ $VERBOSE -eq 1 ]; then echo -e "\nNOTTL specified in CheckList. Not checking TTL for $1\n"; fi
    elif valid_ip $3;
    then
        sARG=1
        oARG="$DNS_SERVER"
        DNS_SERVER="$3"
        if [ $VERBOSE -eq 1 ]; then echo -e "\nCustom DNS record specified in CheckList. Using $DNS_Server as DNS server for $1\n"; fi
    fi

    # If a previous version of the domain DNS entries doesn't exist, Cache DNS entry

    if [ $VERBOSE -eq 1 ];
    then 
        echo -e "Getting current DNS entries for $1...\n"
        dig "@${DNS_SERVER}" "$1" any | sed -n '/^;; ANSWER SECTION:$/,/^;; Query time:/p' | sed -e '/RRSIG/d' -e '/SOA/d' -e '/^;;/d' -e '/^$/d' | sort
        echo -e ""
    fi

    if [ ! -f "${CURRENT_DIR}/domains/${1}" ]
    then
        if [ $VERBOSE -eq 1 ]; then echo -e "\nNo previous DNS entry found for $1. Saving current DNS configuration.\n"; fi
        dig "@${DNS_SERVER}" "$1" any | sed -n '/^;; ANSWER SECTION:$/,/^;; Query time:/p' | sed -e '/RRSIG/d' -e '/SOA/d' -e '/^;;/d' -e '/^$/d' | sort > "${CURRENT_DIR}/domains/${1}"
        continue
    fi

    # If previous DNS entry exist, Move them to tmp and get new entries and compare
    cat "${CURRENT_DIR}/domains/${1}" > "/tmp/${1}_old"

    # If not sending emails, then dont update configuration unless -u specified
    if [ $NOEMAIL -eq 1 ] && [ $UPDATE -eq 0 ]
    then
        dig "@${DNS_SERVER}" "$1" any | sed -n '/^;; ANSWER SECTION:$/,/^;; Query time:/p' | sed -e '/RRSIG/d' -e '/SOA/d' -e '/^;;/d' -e '/^$/d' | sort > "/tmp/${1}_new"
    # else operate normally
    else
        dig "@${DNS_SERVER}" "$1" any | sed -n '/^;; ANSWER SECTION:$/,/^;; Query time:/p' | sed -e '/RRSIG/d' -e '/SOA/d' -e '/^;;/d' -e '/^$/d' | sort > "${CURRENT_DIR}/domains/${1}"
        cat "${CURRENT_DIR}/domains/${1}" > "/tmp/${1}_new"
    fi

    

    # If no TTL specified
    if [ $NOTTL -eq 1 ]
    then
        # Remove TTL from old records
        cut -f 1,3- "/tmp/${1}_old" > "/tmp/dns_notify_tmp"
        cat "/tmp/dns_notify_tmp" > "/tmp/${1}_old"

        # Remove TTL from new records
        cut -f 1,3- "/tmp/${1}_new" > "/tmp/dns_notify_tmp"
        cat "/tmp/dns_notify_tmp" > "/tmp/${1}_new"
    fi

    if [ $VERBOSE -eq 1 ]
    then
        echo "DNS Differences for $1:"
        diff "/tmp/${1}_old" "/tmp/${1}_new"
        echo ""
    fi
    DIFF=`diff "/tmp/${1}_old" "/tmp/${1}_new"`

    # Entries don't match, send email
    if [ $? -eq 1 ]
    then
        if [ $VERBOSE -eq 1 ]; then echo -e "\nDNS Entries Changed! Sending Email!\n\n"; fi

        # Format Diff output
        DIFF=`echo "$DIFF" | tail -n +2 | sed 's/< /deleted\t/g' | sed 's/> /added\t/g'`

        # Process List of admins to send email to.
        if [ $OVERRIDEEMAIL -eq 0 ]
        then
            IFS=':' read -r -a TO <<< "$2"
            for admin in ${!TO[@]}
            do
                TO[$admin]=`echo "${TO[admin]}" | awk -F ',' '{print $2}'`
            done
            TO=`IFS=$', '; echo "${TO[*]}"`

            send "$TO" "$1" "$DIFF"
        else
            send "$2" "$1" "$DIFF"
        fi
        
    fi

    # Revert changes done from special arguements
    if [ $sARG -eq 1 ]
    then
        if [[ $oARG =~ ^[0-9]$ ]]
        then
            sARG=0
            NOTTL="$oARG"
        else
            sARG=0
            DNS_SERVER="$oARG"
        fi
    fi
}


# ~~~~~~~~~~~~ Script Begins Here ~~~~~~~~~~~~ #


# Parse Flags
while getopts "hne:vd:tu" OPTION; do
    case $OPTION in
    h)
        pHelp
        ;;
    t)
        NOTTL=1
        echo "-t flag found. Omitting TTL in checks"
        ;;
    n)
        NOEMAIL=1
        ;;
    u)
        UPDATE=1
        ;;
    e)
        OVERRIDEEMAIL=1
        OEmailAddress=$OPTARG
        ;;
    v)
        VERBOSE=1
        ;;
    d)
        SPECIFIEDDOMAIN=$OPTARG
        ;;
    *)
        pHelp
        ;;
    esac
done
shift $((OPTIND -1))


# Read in Servers and Admins from CheckList
declare -A DOMAINS
declare -A CHKOPS
newDomain=1
domain=""

if [ $VERBOSE -eq 1 ]; then echo "Loading CheckList"; fi
while IFS= read -r line
do
    # If entry is commented out, skip
    if [[ $line = \#* ]]
    then
        if [[ $line == \#*--- ]]
        then
            newDomain=1
            continue
        fi

        # If domain is commented out skip section
        if [ $newDomain -eq 1 ]
        then
            if [ $VERBOSE -eq 1 ]; then echo "Skipping server ${line}..."; fi
            newDomain=0
            continue

        # If single admin is commented out, just skip him/her
        else
            if [ $VERBOSE -eq 1 ]; then echo -e "\tOmitting Admin $line"; fi
            continue
        fi
    fi

    # If server section break, Put last server into list
    if [ "$line" == "---" ]
    then
        if [ "$domain" != "" ]
        then
            IFS=' ' read -ra parseDomain <<< "$domain"
            if [ "${#parseDomain[@]}" -eq 2 ]
            then
                CHKOPS+=(["${parseDomain[0]}"]="${parseDomain[1]}");
            fi
            DOMAINS+=(["${parseDomain[0]}"]="$contacts"); fi
            
        domain=""
        contacts=""
        newDomain=1
        continue
    fi

    # Read in domain
    if [ $newDomain -eq 1 ]
    then
        domain=$line
        newDomain=0
        continue
    fi

    # Read in Admin addresses
    if [ "$contacts" == "" ]
    then
        contacts=$line
    else
        contacts="${contacts}:${line}"
    fi
done < "$CheckList"

# If user specified a domain then check if it exists
if [ "$SPECIFIEDDOMAIN" != "" ]
then
    SDE=0

    echo -e "\n\nDomain was specified. Looking through list."

    for domain in "${!DOMAINS[@]}"
    do
        if [ $domain == $SPECIFIEDDOMAIN ]
        then
            echo -e "Specified domain ($domain) found."
            if [ $OVERRIDEEMAIL -eq 1 ]
            then
                check "$domain" "$OEmailAddress" "${CHKOPS[$domain]}"
            else
                check "$domain" "${DOMAINS[$domain]}" "${CHKOPS[$domain]}"
            fi
            if [ $VERBOSE -eq 1 ]; then echo -e "\n\n$MESSAGECount messages were generated\n"; fi
            exit 0
        fi
    done

    # If it gets to here, then that means the domain doesnt exist in the list already
    >&2 echo "$domain was not found in the list of loaded domains."
    >&2 echo "Please add $domain to the CheckList and try again"
    exit 1
fi


# If verbose mode enabled, print out what is read from CheckList
if [ $VERBOSE -eq 1 ]
then
    echo -e "\n\nThese servers and admins were read in from CheckList"
    declare -p DOMAINS
    echo -e "\n\nThese optional arguements were read in from CheckList"
    declare -p CHKOPS
    echo -e "\n"
fi

# Normal operation
# Iterate through each domain
for domain in "${!DOMAINS[@]}"
do
    if [ $OVERRIDEEMAIL -eq 1 ]
    then
        check "$domain" "$OEmailAddress" "${CHKOPS[$domain]}"
    else
        check "$domain" "${DOMAINS[$domain]}" "${CHKOPS[$domain]}"
    fi
done

if [ $VERBOSE -eq 1 ]; then echo -e "\n\n$MESSAGECount messages were generated\n"; fi

exit 0